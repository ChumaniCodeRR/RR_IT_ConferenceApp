using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace ConferenceSys.ConferenceWardens
{
    public partial class ArrivalDeparture : Form
    {
        NS_ConfAdmin.StrongTypesNS.DS_CCODEDataSet ds_ccode;

        public ArrivalDeparture()
        {
            InitializeComponent();
        }

        private void Register_Load(object sender, EventArgs e)
        {
            try
            {
                //Set default conference
                if (ConferenceSys.Properties.Settings.Default.LastConference != "")
                {
                    txt_conf_code.Text = ConferenceSys.Properties.Settings.Default.LastConference;
                    validate_conference();
                }
                else chk_all.Checked = true;

                disable_field();
                

            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void cb_res_SelectedIndexChanged(object sender, EventArgs e)
        {
            res_changed();
        }

        private void disable_field()
        {
            if (rb_print_all.Checked == true)
            {
                nlb_tempdte.Value = null;
                txt_hours.Text = "";
                txt_min.Text = "";
                pnl_changes.Enabled = false;
            }

            else
            {
                pnl_changes.Enabled = true;
            }
         
        }

        private void btn_search_conf_Click(object sender, EventArgs e)
        {
            try
            {
                SearchConference frm_search = new SearchConference();
                frm_search.ShowDialog();

                if (frm_search.conference != null & frm_search.conference != "")
                {
                    txt_conf_code.Text = frm_search.conference; txt_conf_descrip.Text = frm_search.descrip;              
                    validate_conference();
                }
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void btn_print_Click(object sender, EventArgs e)
        {
            try
            {
                NS_Conference.StrongTypesNS.ds_registerDataSet ds_register = new NS_Conference.StrongTypesNS.ds_registerDataSet();

                bool ALL_CHANGES = true;
                string TCONF = txt_conf_code.Text;
                string tempdate;
                string bookdte;
                string HRS = txt_hours.Text;
                string MINTS = txt_min.Text;
                string tempshall = "";
                string cbuilding = "";
                string feedback;

                if (rb_print_all.Checked == false) ALL_CHANGES = false;

                if (nlb_tempdte.Value == null) tempdate = "?";
                else tempdate = ((DateTime)nlb_tempdte.Value).ToString("dd/MM/yyyy");

                if (nlb_bookdte.Value == null) bookdte = "?";
                else bookdte = ((DateTime)nlb_bookdte.Value).ToString("dd/MM/yyyy");


                tempshall = cb_hall.SelectedValue.ToString();
                if (tempshall == "*") cbuilding = "*";
                else
                {
                    if (cb_res.SelectedValue.ToString() == "999") cbuilding = "*";
                    else cbuilding = cb_buliding.SelectedValue.ToString();
                }

                ds_register = Proxy.ConferenceSystem.arrivals_departures(ALL_CHANGES, TCONF, tempdate, bookdte, HRS, MINTS, tempshall, cbuilding, out feedback);
                if (feedback.Contains("Error"))
                {
                    MessageBox.Show(feedback, "Register Changes", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                
                if (ds_register.tt_arrivals.Rows.Count > 0)
                {
                    string temptitle = feedback + " Arrivals/Departures List";                    
                    Reports frm_report = new Reports("ArrivalDeparture", ds_register, temptitle);
                    frm_report.Show();

                }
                else MessageBox.Show("Your query returned no data to display", "No Data", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }

        }

        private void rb_print_all_CheckedChanged(object sender, EventArgs e)
        {
            disable_field();
        }

        private void cb_hall_SelectedIndexChanged(object sender, EventArgs e)
        {
            hall_changed();
        }

        private void hall_changed()
        {
            try
            {
                if (cb_hall.SelectedIndex > -1)
                {
                    if (cb_hall.SelectedIndex == 0)
                    {
                        cb_res.SelectedIndex = -1;
                        cb_res.Enabled = false;
                        cb_buliding.SelectedIndex = -1;
                        cb_buliding.Enabled = false;
                    }
                    else
                    {
                        cb_res.Enabled = true;
                        cb_buliding.Enabled = true;
                        DataView dv_res = new DataView(ds_ccode.tt_ccode_res);
                        dv_res.Sort = "res_name";
                        dv_res.RowFilter = "shall = '" + cb_hall.SelectedValue.ToString() + "'";
                        bool AddAll = true;

                        if (dv_res.Count > 1)
                        {
                            for (int i = 0; i < ds_ccode.tt_ccode_res.Rows.Count; i++)
                            {
                                if (ds_ccode.tt_ccode_res.Rows[i]["res"].ToString() == "999" &&
                                    ds_ccode.tt_ccode_res.Rows[i]["shall"].ToString() == cb_hall.SelectedValue.ToString()) AddAll = false;
                            }

                            if (AddAll == true)
                            {
                                DataRow newres = ds_ccode.tt_ccode_res.NewRow();
                                newres["res"] = "999";
                                newres["res_name"] = "All Residences";
                                newres["shall"] = cb_hall.SelectedValue.ToString();
                                ds_ccode.tt_ccode_res.Rows.InsertAt(newres, 0);
                            }
                        }

                        cb_res.DataSource = dv_res;
                        cb_res.DisplayMember = "res_name";
                        cb_res.ValueMember = "res";

                    }

                    res_changed();
                }
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void res_changed()
        {
            try
            {
                if (cb_res.SelectedIndex > -1)
                {
                    if (cb_res.SelectedIndex == 0)
                    {
                        cb_buliding.SelectedIndex = -1;
                        cb_buliding.Enabled = false;
                    }
                    else
                    {
                        cb_buliding.Enabled = true;
                        cb_buliding.Enabled = true;
                        bool AddAll = true;

                        DataView dv_build = new DataView(ds_ccode.tt_ccode_build);
                        dv_build.Sort = "building_name";
                        dv_build.RowFilter = "res = '" + cb_res.SelectedValue.ToString() + "'";

                        if (dv_build.Count > 1)
                        {
                            for (int i = 0; i < ds_ccode.tt_ccode_build.Rows.Count; i++)
                            {
                                if (ds_ccode.tt_ccode_build.Rows[i]["building"].ToString() == "*" &&
                                    ds_ccode.tt_ccode_build.Rows[i]["res"].ToString() == cb_res.SelectedValue.ToString()) AddAll = false;
                            }

                            if (AddAll == true)
                            {
                                DataRow newbuild = ds_ccode.tt_ccode_build.NewRow();
                                newbuild["building"] = "*";
                                newbuild["building_name"] = "All Buildings";
                                newbuild["res"] = cb_res.SelectedValue.ToString();
                                ds_ccode.tt_ccode_build.Rows.InsertAt(newbuild, 0);
                            }
                        }
                        cb_buliding.DataSource = dv_build;
                        cb_buliding.DisplayMember = "building_name";
                        cb_buliding.ValueMember = "building";

                    }
                }
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void validate_conference()
        {
            try
            {
                if (txt_conf_code.Text != "")
                {
                    DateTime ConfStart = DateTime.Today;
                    DateTime ConfEnd = DateTime.Today;
                    string feedback = Proxy.ConferenceSystem.validate_conference(txt_conf_code.Text, out ConfStart, out ConfEnd);
                    if (!feedback.Contains("Error"))
                    {
                        nlb_tempdte.MinDate = DateTimePicker.MinimumDateTime;
                        nlb_bookdte.MinDate = DateTimePicker.MinimumDateTime;

                        nlb_tempdte.MaxDate = DateTimePicker.MaximumDateTime;
                        nlb_bookdte.MaxDate = DateTimePicker.MaximumDateTime;

                        txt_conf_descrip.Text = feedback;
                        nlb_tempdte.Value = ConfStart;
                        nlb_bookdte.Value = ConfStart;

                        if (txt_conf_code.Text.ToString() != string.Empty)
                        {
                            ds_ccode = new NS_ConfAdmin.StrongTypesNS.DS_CCODEDataSet();
                            ds_ccode = Proxy.ConferenceAdmin.get_conf_halls(txt_conf_code.Text.ToString());

                            DataView dv_halls = new DataView(ds_ccode.tt_ccode_hall);
                            dv_halls.Sort = "descrip";

                            DataRow newhall = ds_ccode.tt_ccode_hall.NewRow();
                            newhall["shall"] = "*";
                            newhall["descrip"] = "All Halls";
                            ds_ccode.tt_ccode_hall.Rows.InsertAt(newhall, 0);


                            cb_hall.Enabled = true;
                            cb_hall.DataSource = dv_halls ;
                            cb_hall.DisplayMember = "descrip";
                            cb_hall.ValueMember = "shall";


                            if (ConferenceSys.Properties.Settings.Default.LastConference != txt_conf_code.Text.ToString())
                            {
                                ConferenceSys.Properties.Settings.Default.LastConference = txt_conf_code.Text.ToString();
                                if (nlb_tempdte.Value != null) ConferenceSys.Properties.Settings.Default.RegLastChange = DateTime.Today;
                                ConferenceSys.Properties.Settings.Default.RegLastHour = DateTime.Now.Hour.ToString();
                                ConferenceSys.Properties.Settings.Default.RegLastMin = DateTime.Now.Minute.ToString();
                                ConferenceSys.Properties.Settings.Default.Save();
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show(feedback, "Error Conference", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        txt_conf_code.Text = "";
                        txt_conf_descrip.Text = "";
                        txt_conf_code.Focus();
                    }
                }
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

      

        private void rb_print_changes_CheckedChanged(object sender, EventArgs e)
        {
          /*  if (rb_print_changes.Checked == true)
            {
                // Set default last change date and time
                if (ConferenceSys.Properties.Settings.Default.ArrivalsLastChangeDate.Year >= DateTime.Today.Year) nlb_tempdte.Value = ConferenceSys.Properties.Settings.Default.ArrivalsLastChangeDate;
                else nlb_tempdte.Value = null;
                if (ConferenceSys.Properties.Settings.Default.ArrivalsLastHour != string.Empty) txt_hours.Text = ConferenceSys.Properties.Settings.Default.ArrivalsLastHour;
                if (ConferenceSys.Properties.Settings.Default.ArrivalsLastMin != null) txt_min.Text = ConferenceSys.Properties.Settings.Default.ArrivalsLastMin;
            } */
        }

        private void chk_all_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_all.Checked == true)
            {
                txt_conf_code.Text = string.Empty;
                txt_conf_descrip.Text = string.Empty;
                btn_search_conf.Enabled = false;

                ds_ccode = Proxy.ConferenceAdmin.get_conf_halls("*");
                DataView dv_halls = new DataView(ds_ccode.tt_ccode_hall);
                dv_halls.Sort = "descrip";

                DataRow newhall = ds_ccode.tt_ccode_hall.NewRow();
                newhall["shall"] = "*";
                newhall["descrip"] = "All Halls";
                ds_ccode.tt_ccode_hall.Rows.InsertAt(newhall, 0);


                cb_hall.Enabled = true;
                cb_hall.DataSource = dv_halls;
                cb_hall.DisplayMember = "descrip";
                cb_hall.ValueMember = "shall";
            }
            else
            {
                btn_search_conf.Enabled = true;

                cb_hall.Enabled = false;
                cb_hall.DataSource = null;

            }
        }
    }
}
