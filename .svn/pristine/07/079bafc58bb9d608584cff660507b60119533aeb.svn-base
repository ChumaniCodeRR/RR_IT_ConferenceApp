using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using ConferenceSys.ConferenceWardens;
using Utilities;

namespace ResOps.ConferenceAdmin.ConferenceUpdate
{
    public partial class ConferenceUpdate : Form
    {
        NS_ConfAdmin.StrongTypesNS.ds_conference_adminDataSet ds_conference;
        public int tcode = 0;
        public bool addnew;
        
       
        public ConferenceUpdate()
        {
            InitializeComponent();
        }

        private void MaintainDegrees_Load(object sender, EventArgs e)
        {
            pnl_header.Enabled = true;
            pnl_detail.Enabled = false;
       
        }

        private void load_conference()
        {
            if (txt_conf_code.Text == "") MessageBox.Show("PLease enter conference code to continue", "Error Code", MessageBoxButtons.OK, MessageBoxIcon.Error);
            else
            {

                string feedback;
                ds_conference = Proxy.ConferenceAdmin.get_conference(addnew, txt_conf_code.Text, out feedback);
                if (feedback != "") MessageBox.Show(feedback, "Code Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                else
                {
                    txt_ccode.Text = txt_conf_code.Text;
                    txt_conf_descrip.Text = ds_conference.tt_conference[0].conference.ToString();
                    bs_conference.DataSource = ds_conference.tt_conference;
                    bs_adms.DataSource = ds_conference.tt_adms;
                    bs_rates.DataSource = ds_conference.tt_conf_type;
                
                    addnew_click();
                    pnl_header.Enabled = false;
                    pnl_detail.Enabled = true;
                }
            }

        }

   

        private void MaintainSubjects_Load(object sender, EventArgs e)
        {
            pnl_detail.Enabled = false;
            pnl_header.Enabled = true;
        }

                   

        private void chck_add_new_CheckedChanged(object sender, EventArgs e)
        {

            addnew_click();
        }

        private void addnew_click()
        {
            if (chck_add_new.Checked == true)
            {
                txt_ccode.Text = txt_conf_code.Text;
                txt_conference.Enabled = true;
            }
            else
            {
                txt_conference.Enabled = false;
                txt_ccode.Enabled = false;
            }

        }

                private void btn_continue_Click_1(object sender, EventArgs e)
        {
            try
            {
                if (chck_add_new.Checked == true) addnew = true;
                else addnew = false;
                load_conference();
            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }
        }

        private void btn_search_conf_Click_1(object sender, EventArgs e)
        {
            try
            {
                SearchConference frm_search = new SearchConference();
                frm_search.ShowDialog();

                if (frm_search.conference != "")
                {
                    txt_conf_code.Text = frm_search.conference;
                    txt_conf_descrip.Text = frm_search.descrip;
                }
            }

            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }
        }

        private void btn_cancel_Click_1(object sender, EventArgs e)
        {
            try
            {
                ds_conference.tt_conference.Clear();
                ds_conference.tt_adms.Clear();
                ds_conference.tt_conf_type.Clear();
                txt_Userid.Text = "";
                txt_name.Text = "";
                txt_conf_code.Text = "";
                chck_add_new.Checked = false;

                pnl_header.Enabled = true;
                pnl_detail.Enabled = false;
               }
             catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }
        }

        private void bnt_search_protea_Click(object sender, EventArgs e)
        {
            try
            {
                NS_System.StrongTypesNS.DS_ISD_DATADataSet ds_users = Proxy.System.Get_Programs_And_Users();
                SearchEmployee.Search_Protea_Users frm_search_users = new SearchEmployee.Search_Protea_Users(false,ds_users);
                frm_search_users.ShowDialog();
                if (frm_search_users.UserId != "")
                {
                    txt_Userid.Text = frm_search_users.UserId;
                    txt_name.Text = frm_search_users.NameString;
                }
            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }
        }

        private void btn_add_adm_Click(object sender, EventArgs e)
        {
            try
            {
                if (txt_Userid.Text == "") MessageBox.Show("PLease select employee to add as an administrator", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                else
                {
                    bool found = false;
                    string admin = txt_Userid.Text.ToString();
                    for (int i = 0; i < ds_conference.tt_adms.Rows.Count; i++)
                    {
                        NS_ConfAdmin.StrongTypesNS.ds_conference_adminDataSet.tt_admsRow adminrow = ds_conference.tt_adms[i];
                        if (adminrow.ADMIN == admin) found = true;
                    }

                    if (found == false)
                    {
                        DataRow newrow = ds_conference.tt_adms.NewRow();
                        newrow["ccode"] = txt_conf_code.Text.ToString();
                        newrow["admin"] = txt_Userid.Text.ToString();
                        newrow["admin_name"] = txt_name.Text.ToString();
                        ds_conference.tt_adms.Rows.InsertAt(newrow,0);
                        bs_adms.DataSource = ds_conference.tt_adms;
                    }
                    else MessageBox.Show("Administrator has already been added to the list", "Administrator", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
            }
             catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }
        }

        private void btn_remove_adm_Click(object sender, EventArgs e)
        {
            try
            {
                    if (dv_administrators.SelectedRows.Count > 0)
                    {
                        string admin = dv_administrators.SelectedRows[0].Cells[cn_admin.Name].Value.ToString();
                        for (int i = 0; i < ds_conference.tt_adms.Rows.Count; i++)
                        {
                            NS_ConfAdmin.StrongTypesNS.ds_conference_adminDataSet.tt_admsRow adminrow = ds_conference.tt_adms[i];
                            if (adminrow.ADMIN == admin)
                            {
                                ds_conference.tt_adms.Rows.Remove(adminrow);
                                return;
                            }
                        }
                    }
             }
             catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }

        }

  
        private void btn_save_Click_1(object sender, EventArgs e)
        {
            try
            {
                if (txt_conference.Text == "") MessageBox.Show("Conference name cannot be blank", "Name", MessageBoxButtons.OK, MessageBoxIcon.Error);
                else
                {

                    string feedback = Proxy.ConferenceAdmin.update_conference(ds_conference);
                    if (feedback != "") MessageBox.Show(feedback, "Update Conference", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
           
            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }

        }

     
        private void txt_conf_code_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode.Equals(Keys.Enter))
            {
                if (txt_conf_code.Text != "")
                {
                    if (chck_add_new.Checked == true) addnew = true;
                    else addnew = false;
                    load_conference();

                }
            }
        }

    

        private void btn_delete_Click(object sender, EventArgs e)
        {
            try
            {
                if (MessageBox.Show("Are you sure you want to delete " + txt_ccode.Text + " - " + txt_conference.Text, "Delete Conference", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    string feedback = Proxy.ConferenceAdmin.delete_conference(txt_conf_code.Text);
                    if (feedback != "") MessageBox.Show(feedback, "Delete Conference", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    else load_conference();
                }
            }

            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }

        }

        private void btn_search_gl_Click(object sender, EventArgs e)
        {
            try
            {
                if (Proxy.Info.username.StartsWith("testcc")) Proxy.Info.branch = "SD";

                NS_System.StrongTypesNS.ds_accountsDataSet ds_accounts = Proxy.System.Get_GL_Accounts(Proxy.Info.branch , true);

                DMU.Shared_Screens.SearchGLAccounts frm_search_gl = new DMU.Shared_Screens.SearchGLAccounts(ds_accounts);
                frm_search_gl.ShowDialog();
                if (frm_search_gl.gl_account != "") txt_gl_account.Text = frm_search_gl.gl_account;
            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }
 
        }

        private void btn_add_Click_1(object sender, EventArgs e)
        {
            try
            {
                
                string feedback = "";
                NS_ConfAdmin.StrongTypesNS.ds_conference_adminDataSet ds_conf_type = Proxy.ConferenceAdmin.get_conference_type(true, txt_conf_code.Text, 0,out feedback);
                if (feedback != "") MessageBox.Show(feedback, "Error Conf Type", MessageBoxButtons.OK, MessageBoxIcon.Error);
                else
                {
                    ResOps.ConferenceAdmin.ConferenceUpdate.ConferenceTypes frm_types = new ConferenceTypes(ds_conf_type);
                    frm_types.ShowDialog();
                    addnew = false;
                    load_conference();
                }
               

            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }
        }

        private void dg_types_DoubleClick_1(object sender, EventArgs e)
        {
            try
            {
               

                string feedback = "";
                NS_ConfAdmin.StrongTypesNS.ds_conference_adminDataSet ds_conf_type = Proxy.ConferenceAdmin.get_conference_type(false, txt_conf_code.Text,  Int32.Parse(dg_types.SelectedRows[0].Cells[cn_tcode.Name].Value.ToString()), out feedback);
                if (feedback != "") MessageBox.Show(feedback, "Error Conf Type", MessageBoxButtons.OK, MessageBoxIcon.Error);
                else
                {
                    ResOps.ConferenceAdmin.ConferenceUpdate.ConferenceTypes frm_types = new ConferenceTypes(ds_conf_type);
                    frm_types.ShowDialog();
                    addnew = false;
                    load_conference();
                }
              


            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                if (dg_types.SelectedRows.Count > 0)
                {
                    if (MessageBox.Show("Are you sure you want to delete " + dg_types.SelectedRows[0].Cells[cn_descrip.Name].Value.ToString() + " from conference types list", "Delete Conference Type", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        string feedback = Proxy.ConferenceAdmin.delete_conference_types(txt_conf_code.Text, Int32.Parse(dg_types.SelectedRows[0].Cells[cn_tcode.Name].Value.ToString()));
                        if (feedback != "") MessageBox.Show(feedback, "Delete Type", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        else load_conference();
                    }
                }

            }

            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.ResOps, ex);
            }

        }

     

    }
}
