using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace ConferenceSys.ConferenceWardens
{
    public partial class Register : Form
    {
        public Register()
        {
            InitializeComponent();
        }

        private void Register_Load(object sender, EventArgs e)
        {
            try
            {
                // Set default conference
                if (ConferenceSys.Properties.Settings.Default.LastConference != "")
                {
                    txt_conf_code.Text = ConferenceSys.Properties.Settings.Default.LastConference;
                    validate_conference();
                }

                // Set default date from
                if (ConferenceSys.Properties.Settings.Default.LastStartDate >= DateTime.Today) nlb_from.Value = ConferenceSys.Properties.Settings.Default.LastStartDate;
                else nlb_from.Value = DateTime.Today;

                // Set default date to 
                if (ConferenceSys.Properties.Settings.Default.LastEndDate >= DateTime.Today) nlb_to.Value = ConferenceSys.Properties.Settings.Default.LastEndDate;
                else nlb_to.Value = DateTime.Today;
                                
                DataTable dt_hall = Global.Global.ds_conf_codes.tt_conf_hall.Copy();
                DataRow newhall = dt_hall.NewRow();
                newhall["hall"] = "*";
                newhall["hallname"] = "All Halls";
                dt_hall.Rows.InsertAt(newhall, 0);
                bs_hall.DataSource = dt_hall;
                cb_hall.SelectedValue = ConferenceSys.Properties.Settings.Default.LastHall.ToString();

                bs_res.DataSource = Global.Global.ds_conf_codes.tt_conf_res;
                bs_building.DataSource = Global.Global.ds_conf_codes.TT_CONF_BUILDING;

                disable_field();
                hall_changed();
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
         
        }

        private void cb_res_SelectedIndexChanged(object sender, EventArgs e)
        {
            res_changed();
        }

        private void disable_field()
        {
            if (rb_print_all.Checked == true)
            {
                nlb_from.Enabled = true;
                nlb_to.Enabled = true;
                cb_res.Enabled = true;
                nlb_change_after.Enabled = false;
                txt_hours.Enabled = false;
                txt_min.Enabled = false;
            }

            else
            {
                nlb_change_after.Enabled = true;
                txt_hours.Enabled = true;
                txt_min.Enabled = true;
                nlb_from.Enabled = false;
                nlb_to.Enabled = false;
            }
         
        }

        private void btn_search_groups_Click(object sender, EventArgs e)
        {
            if (txt_conf_code.Text != string.Empty)
            {
                ConferenceSys.ConferenceAdmin.SearchMainReserv frmMain = new ConferenceSys.ConferenceAdmin.SearchMainReserv(txt_conf_code.Text.ToString(), txt_conf_descrip.Text.ToString());
                frmMain.ShowDialog();
                if (frmMain.Mainfolio != "") txt_main_folio.Text = frmMain.Mainfolio;
                else txt_main_folio.Text = "";
            }
            else
            {
                ConferenceSys.ConferenceWardens.SearchFolio frm_search = new ConferenceSys.ConferenceWardens.SearchFolio();
                frm_search.ShowDialog();

                if (frm_search.folio != "") txt_main_folio.Text = frm_search.folio;
                else txt_main_folio.Text = "";
            }
        }

        private void btn_search_conf_Click(object sender, EventArgs e)
        {
            try
            {
                SearchConference frm_search = new SearchConference();
                frm_search.ShowDialog();

                if (frm_search.conference != "")
                {
                    txt_conf_code.Text = frm_search.conference;
                    txt_conf_descrip.Text = frm_search.descrip;
                }

            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void btn_print_Click(object sender, EventArgs e)
        {
            try
            {
                NS_Conference.StrongTypesNS.ds_registerDataSet ds_register = new NS_Conference.StrongTypesNS.ds_registerDataSet();

                string cbuilding = "";
                string tempshall = "";
                string tempdate;
                string tempdate1;
                string tempdate2;
                string feedback = "";

                tempshall = cb_hall.SelectedValue.ToString();
                if (tempshall == "*") cbuilding = "*";
                else
                {
                    if (cb_res.SelectedValue.ToString() == "999") cbuilding = "*";
                    else cbuilding = cb_buliding.SelectedValue.ToString();
                }

               
                if (nlb_from.Value == null) tempdate = "?";
                else tempdate = ((DateTime)nlb_from.Value).ToString("dd/MM/yyyy");

                if (nlb_to.Value == null) tempdate1 = "?";
                else tempdate1 = ((DateTime)nlb_to.Value).ToString("dd/MM/yyyy");

                if (nlb_change_after.Value == null) tempdate2 = "?";
                else tempdate2 = ((DateTime)nlb_change_after.Value).ToString("dd/MM/yyyy");

                ds_register = Proxy.ConferenceSystem.register("*", cbuilding, tempshall, txt_conf_code.Text, tempdate, tempdate1, txt_main_folio.Text, rb_print_changes.Checked, tempdate2, txt_hours.Text, txt_min.Text,  out feedback);
                if (feedback.Contains("Error"))
                {
                    MessageBox.Show(feedback, "Register Changes", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                
                if (ds_register.TT_REGISTER.Rows.Count == 0 && rb_print_changes.Checked == true)
                {
                    
                        ConferenceSys.Properties.Settings.Default.LastConference = txt_conf_code.Text.ToString();
                        if (nlb_change_after.Value != null) ConferenceSys.Properties.Settings.Default.RegLastChange = DateTime.Parse(nlb_change_after.Value.ToString());
                        ConferenceSys.Properties.Settings.Default.RegLastHour = txt_hours.Text.ToString();
                        ConferenceSys.Properties.Settings.Default.RegLastMin = txt_min.Text.ToString();
                        ConferenceSys.Properties.Settings.Default.Save();
                }                

                if (ds_register.TT_REGISTER.Rows.Count > 0)
                {
                    ConferenceSys.Properties.Settings.Default.LastConference = txt_conf_code.Text.ToString();
                    if (nlb_change_after.Value != null) ConferenceSys.Properties.Settings.Default.RegLastChange = DateTime.Today;
                    ConferenceSys.Properties.Settings.Default.RegLastHour = DateTime.Now.Hour.ToString();
                    ConferenceSys.Properties.Settings.Default.RegLastMin = DateTime.Now.Minute.ToString();
                    ConferenceSys.Properties.Settings.Default.Save();

                    string temptitle = feedback;
                    
                    Reports frm_report = new Reports("Register", ds_register, temptitle);
                    frm_report.Show();

                }
                else MessageBox.Show("Your query returned no data to display", "No Data", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void rb_print_all_CheckedChanged(object sender, EventArgs e)
        {
            disable_field();
        }

        private void cb_hall_SelectedIndexChanged(object sender, EventArgs e)
        {
            hall_changed();
        }

        private void hall_changed()
        {
            try
            {
                if (cb_hall.SelectedIndex == 0)
                {
                    cb_res.SelectedIndex = 0;
                    cb_res.Enabled = false;
                    cb_buliding.SelectedIndex = -1;
                    cb_buliding.Enabled = false;
                }
                else
                {
                    DataTable dt_res = Global.Global.ds_conf_codes.tt_conf_res.Copy();
                    cb_res.Enabled = true;
                    cb_buliding.Enabled = true;
                    DataView dv_res = new DataView(dt_res);
                    dv_res.RowFilter = "hall = '" + cb_hall.SelectedValue.ToString() + "'";
                    if (dv_res.Count > 1)
                    {
                        bool Add = true;

                        for (int i = 0; i < dt_res.Rows.Count; i++)
                        {
                            if (dt_res.Rows[i]["res"].ToString() == "999" &&
                                dt_res.Rows[i]["hall"].ToString() == cb_hall.SelectedValue.ToString()) Add = false;
                        }

                        if (Add == true)
                        {

                            DataRow newres = dt_res.NewRow();
                            newres["res"] = 999;
                            newres["resname"] = "All Residences";
                            newres["hall"] = cb_hall.SelectedValue.ToString();
                            dt_res.Rows.InsertAt(newres, 0);
                        }

                        DataView dv_resall = new DataView(dt_res);
                        dv_resall.RowFilter = "hall = '" + cb_hall.SelectedValue.ToString() + "'";
                        bs_res.DataSource = dv_resall;
                        cb_res.SelectedIndex = 0;

                    }
                    else bs_res.DataSource = dv_res;
                }

                res_changed();
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void res_changed()
        {
            try
            {

                bool Add = true;

                if (cb_res.SelectedValue.ToString() != "999")
                {
                    DataTable dt_building = Global.Global.ds_conf_codes.TT_CONF_BUILDING.Copy();
                    cb_buliding.Enabled = true;
                    DataView dv_buildings = new DataView(dt_building);
                    dv_buildings.RowFilter = "res = " + cb_res.SelectedValue.ToString();
                    if (dv_buildings.Count > 1)
                    {


                        for (int i = 0; i < dt_building.Rows.Count; i++)
                        {
                            if (dt_building.Rows[i]["building"].ToString() == "*" &&
                                dt_building.Rows[i]["res"].ToString() == cb_res.SelectedValue.ToString()) Add = false;
                        }

                        if (Add == true)
                        {
                            DataRow newbuild = dt_building.NewRow();
                            newbuild["building"] = "*";
                            newbuild["building_name"] = "All Buildings";
                            newbuild["res"] = Int32.Parse(cb_res.SelectedValue.ToString());
                            dt_building.Rows.InsertAt(newbuild, 0);

                        }                     
                    }
                    bs_building.DataSource = dv_buildings;
                    if (dv_buildings.Count > 1) cb_buliding.SelectedIndex = 0;
                }
                else
                {
                    cb_buliding.Enabled = false;

                }

            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void validate_conference()
        {
            try
            {
                if (txt_conf_code.Text != "")
                {
                    string feedback = Proxy.ConferenceSystem.validate_conference(txt_conf_code.Text);
                    if (!feedback.Contains("Error")) txt_conf_descrip.Text = feedback;
                    else
                    {
                        MessageBox.Show(feedback, "Error Conference", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        txt_conf_code.Text = "";
                        txt_conf_descrip.Text = "";
                        txt_conf_code.Focus();
                    }
                }
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void txt_conf_code_Leave(object sender, EventArgs e)
        {
            validate_conference();
        }

        private void txt_conf_code_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                validate_conference();
            }
        }


        private void validate_group()
        {
            try
            {
                if (txt_main_folio.Text != "")
                {
                    string feedback = Proxy.ConferenceSystem.validate_mainfolio(txt_main_folio.Text);
                    if (!feedback.Contains("Error")) txt_grp_descrip.Text = feedback;
                    else
                    {
                        MessageBox.Show(feedback, "Error Group", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        txt_main_folio.Text = "";
                        txt_grp_descrip.Text = "";
                        txt_main_folio.Focus();
                    }
                }
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }
        

        private void txt_grp_code_Leave(object sender, EventArgs e)
        {
           validate_group();
        }
       
        private void txt_grp_code_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                validate_group();
            }
        }

        private void rb_print_changes_CheckedChanged(object sender, EventArgs e)
        {
            if (rb_print_changes.Checked == true)
            {
                // Set default last change date and time
                if (ConferenceSys.Properties.Settings.Default.RegLastChange.Year >= DateTime.Today.Year) nlb_change_after.Value = ConferenceSys.Properties.Settings.Default.RegLastChange;
                else nlb_change_after.Value = null;
                if (ConferenceSys.Properties.Settings.Default.RegLastHour != string.Empty) txt_hours.Text = ConferenceSys.Properties.Settings.Default.RegLastHour;
                if (ConferenceSys.Properties.Settings.Default.RegLastMin != null) txt_min.Text = ConferenceSys.Properties.Settings.Default.RegLastMin;
            }
        }
    }
}
