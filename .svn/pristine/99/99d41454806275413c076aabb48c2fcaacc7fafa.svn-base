using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace ConferenceSys.ConferenceWardens
{
    public partial class MealsReport: Form
    {

        public MealsReport()
        {
            InitializeComponent();
        }

        private void Register_Load(object sender, EventArgs e)
        {
            try
            {
                // Set default conference
                if (ConferenceSys.Properties.Settings.Default.LastConference != "")
                {
                    txt_conf_code.Text = ConferenceSys.Properties.Settings.Default.LastConference;
                    validate_conference();
                }
                else
                {
                    chk_all.Checked = true;
                    nlb_tempdte.MinDate = DateTimePicker.MinimumDateTime;
                    nlb_tempdte.MaxDate = DateTimePicker.MaximumDateTime;
                    nlb_tempdte.Value = DateTime.Today;
                }


                NS_Conference.StrongTypesNS.ds_conf_codesDataSet ds_codes = Proxy.ConferenceSystem.populate_conf_codes();
                DataRow newhall = ds_codes.tt_dhall.NewRow();
                newhall["dhall"] = "*";
                newhall["detail"] = " All Halls";
                ds_codes.tt_dhall.Rows.InsertAt(newhall, 0);

                DataView dvHall = new DataView(ds_codes.tt_dhall);
                dvHall.Sort = "detail";
                cb_hall.Enabled = true;
                cb_hall.DataSource = dvHall;
                cb_hall.DisplayMember = "detail";
                cb_hall.ValueMember = "dhall";

               
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
         
        }

        private void cb_res_SelectedIndexChanged(object sender, EventArgs e)
        {
            //res_changed();
        }

        private void btn_search_conf_Click(object sender, EventArgs e)
        {
            try
            {
                SearchConference frm_search = new SearchConference();
                frm_search.ShowDialog();

                if (frm_search.conference != null & frm_search.conference != string.Empty)
                {
                    txt_conf_code.Text = frm_search.conference; txt_conf_descrip.Text = frm_search.descrip;
                   // validate_conference();
                }
                else return;
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void btn_print_Click(object sender, EventArgs e)
        {
            try
            {
                if (chk_all.Checked == false & txt_conf_code.Text == string.Empty) MessageBox.Show("Please select a Conference or Click All to continue", "Error Conference", MessageBoxButtons.OK, MessageBoxIcon.Error);
                else if (cb_hall.SelectedIndex < 0) MessageBox.Show("Please select hall to continue","Error Hall",MessageBoxButtons.OK,MessageBoxIcon.Error);
                else if (nlb_tempdte.Value == null) MessageBox.Show("Please select report date to continue","Error Date",MessageBoxButtons.OK,MessageBoxIcon.Error);
                else
                {

                NS_Conference.StrongTypesNS.ds_registerDataSet ds_register = new NS_Conference.StrongTypesNS.ds_registerDataSet();

                string TCONF = txt_conf_code.Text;
                string tempdate = ((DateTime)nlb_tempdte.Value).ToString("dd/MM/yyyy");
                string tmeal;
                string tempshall = "";
                string cbuilding = "*";
                string feedback;

                tempshall = cb_hall.SelectedValue.ToString();
               

                if (rb_all.Checked == true) tmeal = "*";
                else if (rb_breakfast.Checked == true) tmeal = "B";
                else if (rb_lunch.Checked == true) tmeal = "L";
                else tmeal = "S";

                 ds_register = Proxy.ConferenceSystem.meals_report(TCONF, tempdate, tmeal, tempshall, cbuilding, out feedback);
                if (feedback.Contains("Error"))
                {
                    MessageBox.Show(feedback, "Register Changes", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                if (ds_register.tt_meals.Rows.Count > 0)
                {
                    ConferenceSys.Properties.Settings.Default.LastConference = txt_conf_code.Text.ToString();
                    if (nlb_tempdte.Value != null) ConferenceSys.Properties.Settings.Default.LastChangeDate = DateTime.Parse(nlb_tempdte.Value.ToString());
                    ConferenceSys.Properties.Settings.Default.Save();

                    string temptitle = tempdate;
                    Reports frm_report = new Reports("MealsReport", ds_register, temptitle);
                    frm_report.Show();

                }
                else MessageBox.Show("Your query returned no data to display", "No Data", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void validate_conference()
        {
            try
            {
                if (txt_conf_code.Text != "")
                {
                    DateTime ConfStart = DateTime.Today;
                    DateTime ConfEnd = DateTime.Today;
                    string feedback = Proxy.ConferenceSystem.validate_conference(txt_conf_code.Text, out ConfStart, out ConfEnd);
                    if (!feedback.Contains("Error"))
                    {
                        nlb_tempdte.MinDate = DateTimePicker.MinimumDateTime;
                        nlb_tempdte.MaxDate = DateTimePicker.MaximumDateTime;

                        nlb_tempdte.MinDate = ConfStart;
                        nlb_tempdte.MaxDate = ConfEnd;

                        txt_conf_descrip.Text = feedback;
                        nlb_tempdte.Value = ConfStart;
                        

                        if (txt_conf_code.Text.ToString() != string.Empty)
                        {
                            
                            if (ConferenceSys.Properties.Settings.Default.LastConference != txt_conf_code.Text.ToString())
                            {
                                ConferenceSys.Properties.Settings.Default.LastConference = txt_conf_code.Text.ToString();
                                if (nlb_tempdte.Value != null) ConferenceSys.Properties.Settings.Default.RegLastChange = DateTime.Today;
                                ConferenceSys.Properties.Settings.Default.RegLastHour = DateTime.Now.Hour.ToString();
                                ConferenceSys.Properties.Settings.Default.RegLastMin = DateTime.Now.Minute.ToString();
                                ConferenceSys.Properties.Settings.Default.Save();
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show(feedback, "Error Conference", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        txt_conf_code.Text = "";
                        txt_conf_descrip.Text = "";
                        txt_conf_code.Focus();
                    }
                }
            }
            catch (Exception ex)
            {
                Utilities.Utils.HandleException(Utilities.ExceptionSource.ConferenceSystem, ex);
            }
        }

        private void chk_all_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_all.Checked == true)
            {
                nlb_tempdte.MinDate = DateTimePicker.MinimumDateTime;
                nlb_tempdte.MaxDate = DateTimePicker.MaximumDateTime;

                nlb_tempdte.Value = DateTime.Today;

                txt_conf_code.Text = string.Empty;
                txt_conf_descrip.Text = string.Empty;
                btn_search_conf.Enabled = false;
                
            }
            else
            {              
                btn_search_conf.Enabled = true;
                cb_hall.Enabled = false;
                cb_hall.DataSource = null;
            }
        }
    }
}
